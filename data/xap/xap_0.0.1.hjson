{
    // Documentation section is used purely for `qmk xap-generate-docs`.
    documentation: {
        order: [
            page_header
            type_docs
            !type_docs!
            term_definitions
            !term_definitions!
            request_response
            reserved_tokens
            response_flags
            !response_flags!
            example_conversation
        ]

        page_header:
            '''
            # QMK Firmware XAP Specs

            This document describes the requirements of the QMK XAP ("extensible application protocol") API.
            '''

        type_docs:
            '''
            ## Types

            **All integral types are little-endian.**
            '''

        term_definitions:
            '''
            ## Definitions

            This list defines the terms used across the entire set of XAP protocol documentation.
            '''

        request_response:
            '''
            ## Requests and Responses

            Communication generally follows a request/response pattern.

            Each request needs to include a _token_ -- this `u16` value prefixes each outbound request from the host application and its corresponding response, allowing repsonse messages to be correlated with their request, even if multiple host applications are communicating with the firmware simultaneously. Host applications should randomly generate a token ID for **every** outbound request, unless using a reserved token defined below.
            '''

        // This documentation section reserved for next version
        reserved_tokens: ''

        response_flags:
            '''
            Response messages will always be prefixed by the originating request _token_, directly followed by that request's _response flags_:
            '''

        example_conversation:
            '''
            ### Example "conversation":

            **Request** -- version query:
            | Byte | 0 | 1 | 2 | 3 |
            | --- | --- | --- | --- | --- |
            | **Purpose** | Token | Token | Route | Route |
            | **Value** | `0x43` | `0x2B` | `0x00` | `0x00` |

            **Response** -- matching token, successful flag, payload of `0x03170192` = 3.17.192:
            | Byte | 0 | 1 | 2 | 3 | 4 | 5 | 6 |
            | --- | --- | --- | --- | --- | --- | --- | --- |
            | **Purpose** | Token | Token | Response Flags | Payload | Payload | Payload | Payload |
            | **Value** | `0x43` | `0x2B` | `0x01` | `0x92` | `0x01` | `0x17` | `0x03` |
            '''
    }

    type_docs: {
        u8:
            '''
            An unsigned 8-bit integral (octet, or byte), commonly seen as `uint8_t` from _stdint.h_.
            '''
        u16:
            '''
            An unsigned 16-bit integral, commonly seen as `uint16_t` from _stdint.h_.
            '''
        u32:
            '''
            An unsigned 32-bit integral, commonly seen as `uint32_t` from _stdint.h_.
            '''
        "type[n]":
            '''
            An array of `type`, with array extent of `N` -- e.g. `u8[2]` signifies two consecutive octets.
            '''
    }

    term_definitions: {
        Subsystem:
            '''
            A high-level area of functionality within XAP.
            '''
        ID:
            '''
            A single octet / 8-bit byte.
            '''
        Route:
            '''
            A sequence of _IDs_ describing the route to invoke a _handler_.
            '''
        Handler:
            '''
            A piece of code that is executed when a specific _route_ is received.
            '''
        Token:
            '''
            A `u16` associated with a specific request as well as its corresponding response.
            '''
        Response:
            '''
            The data sent back to the host during execution of a _handler_.
            '''
        "Response Flags":
            '''
            An `u8` containing the status of the request.
            '''
        Payload:
            '''
            Any received data appended to the _route_, which gets delivered to the _handler_ when received.
            '''
    }

    response_flags: {
        define_prefix: XAP_RESP
        bits: {
            0: {
                name: Success
                define: SUCCESS
                description:
                    '''
                    When this bit is set, the request was successfully handled. If not set, all payload data should be disregarded, and the request retried if appropriate (with a new token).
                    '''
            }
        }
    }

    subsystems: {
        0x00: {
            name: XAP
            define: XAP_SUBSYSTEM
            description:
                '''
                This subsystem is always present, and provides the ability to query information about the XAP protocol of the connected device.
                '''
            routes: {
                0x00: {
                    name: Version Query
                    define: VERSION_QUERY
                    description:
                        '''
                        XAP protocol version query.

                        * Returns the BCD-encoded version in the format of XX.YY.ZZZZ => `0xXXYYZZZZ`
                            * e.g. 1.1.15 will match `0x01010015`.
                        * Response:
                            * `u32` value.
                        '''
                    always_present: true
                }
            }
        }
    }
}